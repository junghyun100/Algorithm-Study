import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;

public class Main {
    private static int n, m ,v;
    private static int[][] map;
    private static boolean[] visit;
    public static void main(String[] args) throws IOException {
        BufferedReader br= new BufferedReader(new InputStreamReader(System.in));
        String[] temp = br.readLine().trim().split(" ");
        int n = Integer.parseInt(temp[0]);//정점
        int m = Integer.parseInt(temp[1]);//간선
        int v = Integer.parseInt(temp[2]);//시작번호
        map = new int[n+1][n+1];
        visit = new boolean[n+1];
        while(0 < m)
        {
            temp = br.readLine().trim().split(" ");
            int x = Integer.parseInt(temp[0]);
            int y = Integer.parseInt(temp[1]);
            map[x][y] = map[y][x] = 1;
            m--;
        }
        dfs(v, n);
        System.out.println("");
        visit = new boolean[n+1];
        bfs(v, n);
    }
    private static void bfs(int k, int n){
        Queue<Integer> queue = new <Integer>LinkedList();

        queue.offer(k);
        while(!queue.isEmpty()){
            int temp = queue.poll();
            visit[temp] = true;
            System.out.print(temp + " ");
            for (int i = 1; i<=n;i++)
            {
                if(map[temp][i] ==1 && !visit[i]){
                    queue.offer(i);
                    visit[i] = true;
                }
            }
        }
    }
    private static void dfs(int k, int n ) {
        if (visit[k])
            return;
        visit[k]= true;
        System.out.print(k+" ");
        for(int i=1;i<=n;i++)
        {
            if(map[k][i]==1)
                dfs(i,n);
        }
    }
}