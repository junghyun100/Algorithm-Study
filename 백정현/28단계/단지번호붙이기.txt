import java.util.*;
import java.io.*;

public class Main {
	static int[][] array;
	static boolean[][] visited;
	static int houseCount;
	static int[] dx = { 1, 0, -1, 0 };
	static int[] dy = { 0, 1, 0, -1 };
	static int n;

	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		n = Integer.parseInt(br.readLine());
		array = new int[n][n];
		visited = new boolean[n][n];
		for (int i = 0; i < n; i++) {
			String s = br.readLine();
			for (int j = 0; j < n; j++)
				array[i][j] = s.charAt(j) - '0';// 각 줄에 있는 값들 하나씩 받아오기(0 또는 1)
		}

		int apartmentFlex = 0;

		PriorityQueue<Integer> priorityQueue = new PriorityQueue<Integer>();

		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				if (array[i][j] == 1) {
					houseCount = 0;
					dfs(i, j);
					if (houseCount != 0) {
						apartmentFlex++;
						priorityQueue.add(houseCount);
					}
				}
			}
		}
		System.out.println(apartmentFlex);
		while (!priorityQueue.isEmpty())
			System.out.println(priorityQueue.poll());
	}

	static void dfs(int x, int y) {
		if (visited[x][y] == true)
			return;
		visited[x][y] = true;
		houseCount++;

		for (int i = 0; i < 4; i++) {
			int nx = x + dx[i];
			int ny = y + dy[i];
			if (0 <= nx && nx < n && ny < n && 0 <= ny) {
				if (array[nx][ny] == 1) {
					dfs(nx, ny);
				}
			}
		}
	}
}
